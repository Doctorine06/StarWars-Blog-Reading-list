{"version":3,"file":"index.esm.js","sources":["../src/index.js"],"sourcesContent":["const errorOverlayMiddleware = require('react-dev-utils/errorOverlayMiddleware')\n\nconst chunkPathBasic = require.resolve('./entries/basic')\nconst chunkPathDevServer = require.resolve('./entries/devserver')\n\nclass ErrorOverlayPlugin {\n  apply(compiler) {\n    const className = this.constructor.name\n\n    if (compiler.options.mode !== 'development') return\n\n    const devServerEnabled = !!compiler.options.devServer\n    const sockOptions = {}\n    if (devServerEnabled) {\n      sockOptions.sockHost = compiler.options.devServer.sockHost\n      sockOptions.sockPath = compiler.options.devServer.sockPath\n      sockOptions.sockPort = compiler.options.devServer.sockPort\n    }\n\n    compiler.hooks.entryOption.tap(className, (context, entry) => {\n      adjustEntry(entry, devServerEnabled, sockOptions)\n    })\n\n    compiler.hooks.afterResolvers.tap(className, ({ options }) => {\n      if (devServerEnabled) {\n        const originalBefore = options.devServer.before\n        options.devServer.before = (app, server) => {\n          if (originalBefore) {\n            originalBefore(app, server, compiler)\n          }\n          app.use(errorOverlayMiddleware())\n        }\n      }\n    })\n  }\n}\n\nfunction adjustEntry(entry, enableDevServer, sockOptions) {\n  if (typeof entry === 'string') {\n    entry = [entry] // for anonymous single entry points\n  }\n\n  if (Array.isArray(entry)) {\n    if (enableDevServer) {\n      const sockHost = sockOptions.sockHost\n        ? `&sockHost=${sockOptions.sockHost}`\n        : ''\n      const sockPath = sockOptions.sockPath\n        ? `&sockPath=${sockOptions.sockPath}`\n        : ''\n      const sockPort = sockOptions.sockPort\n        ? `&sockPort=${sockOptions.sockPort}`\n        : ''\n      const chunkPathDevServerWithParams = `${chunkPathDevServer}?${sockHost}${sockPath}${sockPort}`\n      if (!entry.includes(chunkPathDevServerWithParams)) {\n        entry.unshift(chunkPathDevServerWithParams)\n      }\n    }\n\n    if (!entry.includes(chunkPathBasic)) {\n      entry.unshift(chunkPathBasic)\n    }\n  } else {\n    Object.keys(entry).forEach((entryName) => {\n      entry[entryName] = adjustEntry(\n        entry[entryName],\n        enableDevServer,\n        sockOptions,\n      )\n    })\n  }\n\n  return entry\n}\n\nmodule.exports = ErrorOverlayPlugin\n"],"names":[],"mappings":"AAAA,MAAM,yBAAyB,QAAQ;AAEvC,MAAM,iBAAiB,QAAQ,QAAQ;AACvC,MAAM,qBAAqB,QAAQ,QAAQ;AAE3C,yBAAyB;AAAA,EACvB,MAAM,UAAU;AACd,UAAM,YAAY,KAAK,YAAY;AAEnC,QAAI,SAAS,QAAQ,SAAS;AAAe;AAE7C,UAAM,mBAAmB,CAAC,CAAC,SAAS,QAAQ;AAC5C,UAAM,cAAc;AACpB,QAAI,kBAAkB;AACpB,kBAAY,WAAW,SAAS,QAAQ,UAAU;AAClD,kBAAY,WAAW,SAAS,QAAQ,UAAU;AAClD,kBAAY,WAAW,SAAS,QAAQ,UAAU;AAAA;AAGpD,aAAS,MAAM,YAAY,IAAI,WAAW,CAAC,SAAS,UAAU;AAC5D,kBAAY,OAAO,kBAAkB;AAAA;AAGvC,aAAS,MAAM,eAAe,IAAI,WAAW,CAAC,EAAE,cAAc;AAC5D,UAAI,kBAAkB;AACpB,cAAM,iBAAiB,QAAQ,UAAU;AACzC,gBAAQ,UAAU,SAAS,CAAC,KAAK,WAAW;AAC1C,cAAI,gBAAgB;AAClB,2BAAe,KAAK,QAAQ;AAAA;AAE9B,cAAI,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAOlB,qBAAqB,OAAO,iBAAiB,aAAa;AACxD,MAAI,OAAO,UAAU,UAAU;AAC7B,YAAQ,CAAC;AAAA;AAGX,MAAI,MAAM,QAAQ,QAAQ;AACxB,QAAI,iBAAiB;AACnB,YAAM,WAAW,YAAY,WACzB,aAAa,YAAY,aACzB;AACJ,YAAM,WAAW,YAAY,WACzB,aAAa,YAAY,aACzB;AACJ,YAAM,WAAW,YAAY,WACzB,aAAa,YAAY,aACzB;AACJ,YAAM,+BAA+B,GAAG,sBAAsB,WAAW,WAAW;AACpF,UAAI,CAAC,MAAM,SAAS,+BAA+B;AACjD,cAAM,QAAQ;AAAA;AAAA;AAIlB,QAAI,CAAC,MAAM,SAAS,iBAAiB;AACnC,YAAM,QAAQ;AAAA;AAAA,SAEX;AACL,WAAO,KAAK,OAAO,QAAQ,CAAC,cAAc;AACxC,YAAM,aAAa,YACjB,MAAM,YACN,iBACA;AAAA;AAAA;AAKN,SAAO;AAAA;AAGT,OAAO,UAAU"}